'use strict';

exports.__esModule = true;

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExpoSnack = (_temp = _class = function (_React$PureComponent) {
  _inherits(ExpoSnack, _React$PureComponent);

  function ExpoSnack() {
    _classCallCheck(this, ExpoSnack);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  ExpoSnack.prototype.componentDidMount = function componentDidMount() {
    this.updateIframeContent();
  };

  ExpoSnack.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    this.updateIframeContent();
  };

  ExpoSnack.prototype.updateIframeContent = function updateIframeContent() {
    var _props = this.props,
        id = _props.id,
        platform = _props.platform,
        preview = _props.preview,
        theme = _props.theme,
        height = _props.height;


    var iframe = this.iframeNode;

    var doc = iframe.document;
    if (iframe.contentDocument) doc = iframe.contentDocument;else if (iframe.contentWindow) doc = iframe.contentWindow.document;

    var expoScript = '<div data-snack-id="' + id + '" data-snack-platform="' + platform + '" data-snack-preview="' + preview + '" data-snack-theme="' + theme + '" style="overflow:hidden;background:#' + (theme === 'dark' ? '212733' : 'fafafa') + ';border:1px solid rgba(0,0,0,.16);border-radius:4px;height:' + height + 'px;width:100%"></div><script async src="https://snack.expo.io/embed.js"></script>';
    var iframeHtml = '<html><head><base target="_parent"></head><body>' + expoScript + '</body></html>';

    doc.open();
    doc.writeln(iframeHtml);
    doc.close();
  };

  ExpoSnack.prototype.render = function render() {
    var _this2 = this;

    var _props2 = this.props,
        id = _props2.id,
        height = _props2.height;


    return _react2.default.createElement('iframe', {
      ref: function ref(n) {
        _this2.iframeNode = n;
      },
      width: '100%',
      height: height + 18 + 'px',
      frameBorder: 0,
      id: 'expo-snack-' + id
    });
  };

  return ExpoSnack;
}(_react2.default.PureComponent), _class.defaultProps = {
  platform: 'ios',
  theme: 'dark',
  preview: true,
  height: 505
}, _temp);
exports.default = ExpoSnack;
module.exports = exports['default'];